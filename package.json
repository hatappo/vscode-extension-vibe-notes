{
	"name": "vibe-notes",
	"displayName": "Vibe Notes",
	"description": "Private code notes that vibe with your workflow",
	"publisher": "hatappo",
	"version": "0.1.0",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/hatappo/vscode-extension-vibe-notes"
	},
	"engines": {
		"vscode": "^1.101.0"
	},
	"categories": ["Other"],
	"keywords": [
		"notes",
		"comments",
		"private notes",
		"vibe notes",
		"code annotations",
		"agentic coding",
		"vibe coding",
		"ai coding"
	],
	"activationEvents": ["onStartupFinished"],
	"main": "./dist/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "vibe-notes.addNote",
				"title": "Vibe Notes: Add Note to Line"
			},
			{
				"command": "vibe-notes.editNoteAtCursor",
				"title": "Vibe Notes: Edit Note"
			},
			{
				"command": "vibe-notes.deleteNoteAtCursor",
				"title": "Vibe Notes: Delete Note"
			},
			{
				"command": "vibe-notes.editNoteAtLine",
				"title": "Vibe Notes: Edit Note at Line"
			},
			{
				"command": "vibe-notes.deleteNoteAtLine",
				"title": "Vibe Notes: Delete Note at Line"
			},
			{
				"command": "vibe-notes.showMarkdown",
				"title": "Open/Refresh Markdown",
				"icon": "$(markdown)"
			},
			{
				"command": "vibe-notes.refreshTree",
				"title": "Refresh View",
				"icon": "$(refresh)"
			},
			{
				"command": "vibe-notes.saveToGitNotes",
				"title": "Save to git notes",
				"icon": "$(git-branch)"
			},
			{
				"command": "vibe-notes.setupGitignore",
				"title": "Setup gitignore",
				"icon": "$(heart)"
			},
			{
				"command": "vibe-notes.copyForLLM",
				"title": "Copy for AI/LLM",
				"icon": "$(robot)"
			}
		],
		"menus": {
			"editor/context": [
				{
					"command": "vibe-notes.addNote",
					"group": "",
					"when": "editorTextFocus"
				},
				{
					"command": "vibe-notes.editNoteAtCursor",
					"group": "",
					"when": "editorTextFocus"
				},
				{
					"command": "vibe-notes.deleteNoteAtCursor",
					"group": "",
					"when": "editorTextFocus"
				}
			],
			"view/title": [
				{
					"command": "vibe-notes.refreshTree",
					"when": "view == vibeNotesView",
					"group": "navigation@0"
				},
				{
					"command": "vibe-notes.copyForLLM",
					"when": "view == vibeNotesView",
					"group": "navigation@1"
				},
				{
					"command": "vibe-notes.showMarkdown",
					"when": "view == vibeNotesView",
					"group": "navigation@2"
				},
				{
					"command": "vibe-notes.saveToGitNotes",
					"when": "view == vibeNotesView",
					"group": "navigation@3"
				},
				{
					"command": "vibe-notes.setupGitignore",
					"when": "view == vibeNotesView",
					"group": "navigation@4"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "vibe-notes",
					"title": "Vibe Notes",
					"icon": "$(comment-discussion)"
				}
			]
		},
		"views": {
			"vibe-notes": [
				{
					"id": "vibeNotesView",
					"name": "",
					"icon": "$(note)",
					"contextualTitle": "Vibe Notes"
				}
			]
		},
		"configuration": {
			"title": "Vibe Notes",
			"properties": {
				"vibe-notes.copyForLLMPrompt": {
					"type": "string",
					"default": "Please review and implement the following code feedback:",
					"description": "Prompt text to prepend when copying notes for AI/LLM. Leave empty to copy without prompt.",
					"markdownDescription": "Prompt text to prepend when copying notes for AI/LLM. Leave empty to copy without prompt.\n\n**Default:** `Please review and implement the following code feedback:`\n\n**Note:** To restore the default value, edit settings.json and remove this property."
				},
				"vibe-notes.copyForLLMIncludeCode": {
					"type": "boolean",
					"default": true,
					"description": "Include code snippets when copying notes for AI/LLM. Disable to reduce token usage.",
					"markdownDescription": "Include code snippets when copying notes for AI/LLM.\n\n**When enabled:** Notes include the actual code being referenced, providing full context.\n\n**When disabled:** Only note comments are included, reducing token usage."
				}
			}
		}
	},
	"scripts": {
		"node": "node --experimental-strip-types --experimental-transform-types --experimental-detect-module --no-warnings=ExperimentalWarning --loader ts-node/esm",
		"vscode:prepublish": "npm run package",
		"compile": "npm run check-types && npm run lint && node esbuild.js",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "node esbuild.js --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"package": "npm run check-types && npm run lint && node esbuild.js --production",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "npm run compile-tests && npm run compile && npm run lint",
		"check-types": "tsc --noEmit",
		"lint": "eslint src",
		"test": "vscode-test",
		"format": "biome format --write .",
		"format:check": "biome format ."
	},
	"devDependencies": {
		"@biomejs/biome": "1.9.4",
		"@types/mocha": "^10.0.10",
		"@types/node": "20.x",
		"@types/vscode": "1.101.0",
		"@typescript-eslint/eslint-plugin": "^8.31.1",
		"@typescript-eslint/parser": "^8.31.1",
		"@vscode/test-cli": "^0.0.11",
		"@vscode/test-electron": "^2.5.2",
		"esbuild": "^0.25.3",
		"eslint": "^9.25.1",
		"npm-run-all": "^4.1.5",
		"ts-node": "10.9.2",
		"typescript": "^5.8.3"
	}
}
